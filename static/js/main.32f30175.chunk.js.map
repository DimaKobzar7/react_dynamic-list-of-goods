{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","map","id","name","color","style","getAll","fetch","then","response","json","get5First","sort","good1","good2","localeCompare","slice","getRedGoods","filter","good","App","useState","setGoods","handleGoodsSelect","goodSelect","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"wMAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACT,oBAEE,UAAQ,OACRC,MAAO,CAAED,SAHX,SAKGD,GAJID,SCNN,SAASI,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EAAY,WACvB,OAAOL,IACJE,MAAK,SAAAR,GAAK,OAAIA,EACZY,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMV,KAAKY,cAAcD,EAAMX,SACtDa,MAAM,EAAG,OAGHC,EAAc,WACzB,OAAOX,IACJE,MAAK,SAAAR,GAAK,OAAIA,EAAMkB,QAAO,SAAAC,GAAI,MAAmB,QAAfA,EAAKf,aCXhCgB,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOrB,EAAP,KAAcsB,EAAd,KAEMC,EAAoB,SAACC,GACzBA,IAAahB,MAAK,SAAAC,GAAQ,OAAIa,EAASb,OAGzC,OACE,sBAAKgB,UAAU,MAAf,UACE,uDAEA,wBACEC,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMJ,EAAkBjB,IAHnC,4BAQA,wBACEoB,KAAK,SACL,UAAQ,oBACRC,QAAS,kBAAMJ,EAAkBZ,IAHnC,gCAQA,wBACEe,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMJ,EAAkBN,IAHnC,4BAQA,cAAC,EAAD,CAAWjB,MAAOA,QCxCxB4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.32f30175.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(({ id, name, color }) => (\n      <li\n        key={id}\n        data-cy=\"good\"\n        style={{ color }}\n      >\n        {name}\n      </li>\n    ))}\n  </ul>\n);\n\n// import React from 'react';\n// import { Good } from './types/Good';\n\n// type Props = {\n//   goods: Good[]\n// };\n\n// export const GoodsList: React.FC<Props> = ({ goods }) => (\n//   <ul>\n//     {goods.map(({ id, name, color }) => (\n//       <li\n//         key={id}\n//         data-cy=\"good\"\n//         // неясно зачем тут нужны доп фигурные скобки но без них не работает\n//         // они нужны так как jsx кидает js объект типа style={color: 'red'}\n//         // и поскольку у нас название переменной совпадает со стилем то мы\n//         // просто color пишем\n//         style={{ color }}\n//       >\n//         {name}\n//       </li>\n//     ))}\n//   </ul>\n// );\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((good1, good2) => good1.name.localeCompare(good2.name))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter(good => good.color === 'red'));\n};\n// import { Good } from '../types/Good';\n\n// // eslint-disable-next-line\n// const API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\n// export function getAll(): Promise<Good[]> {\n//   return fetch(API_URL)\n//     .then(response => response.json());\n// }\n\n// export const get5First = () => {\n//   return getAll()\n//     .then(goods => {\n//       return goods.sort((good1, good2) => {\n//         const t = good1.name.localeCompare(good2.name);\n//         // почему я не могу взять первые 5 объектов через слайс?\n//         // проблема была в том что я внутри сорт это делал\n//         // то есть я не от результата резал а от каждого объекта резал\n//         // и то походу был айди а там цифра и оно пишет что цифру резать нельзя\n\n//         return t;\n//       }).slice(0, 5);\n//     });\n// };\n\n// export const getRedGoods = () => {\n//   return getAll()\n//     .then(goods => {\n//       return goods.filter(good => good.color === 'red');\n//     });\n// };\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\n\nimport { Good } from './types/Good';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n\n  const handleGoodsSelect = (goodSelect: () => Promise<Good[]>) => {\n    goodSelect().then(response => setGoods(response));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <button\n        type=\"button\"\n        data-cy=\"all-button\"\n        onClick={() => handleGoodsSelect(getAll)}\n      >\n        Load all goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        onClick={() => handleGoodsSelect(get5First)}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"red-button\"\n        onClick={() => handleGoodsSelect(getRedGoods)}\n      >\n        Load red goods\n      </button>\n\n      <GoodsList goods={goods} />\n    </div>\n  );\n};\n\n// import React, { useState } from 'react';\n// import './App.scss';\n// import { GoodsList } from './GoodsList';\n\n// import { Good } from './types/Good';\n\n// import { getAll, get5First, getRedGoods } from './api/goods';\n\n// export const App: React.FC = () => {\n//   const [goods, setGoods] = useState<Good[]>([]);\n\n//   // надо написать функцию для кнопок которая выбирает между 3мя функциями\n//   // и ставит в стейт результат этих функций и его мы кидаем в пропсы\n//   // что писать для тайп скрипта\n//   // просто Good или Good[] не подходит\n//   // а не проходит так как мы получаем промис и для стейта тоже надо было тайпскрипт поставить\n//   const handleGoodsType = (goodType: () => Promise<Good[]>) => {\n//     goodType().then(response => {\n//       setGoods(response);\n//     });\n//   };\n\n//   // по клику на кнопке я беру данные из сервера что приходят из функций\n//   // что работают с фетчем и сервером\n//   // можно передать как ссылку на функцию так и вызвать сразу функцию с фетчем и в\n//   // обработчике уже работать с объектом промис а не вытаскивать его с функции что обработчик ловит\n//   return (\n//     <div className=\"App\">\n//       <h1>Dynamic list of Goods</h1>\n\n//       <button\n//         type=\"button\"\n//         data-cy=\"all-button\"\n//         onClick={() => handleGoodsType(getAll)}\n//       >\n//         Load all goods\n//       </button>\n\n//       <button\n//         type=\"button\"\n//         data-cy=\"first-five-button\"\n//         onClick={() => handleGoodsType(get5First)}\n//       >\n//         Load 5 first goods\n//       </button>\n\n//       <button\n//         type=\"button\"\n//         data-cy=\"red-button\"\n//         onClick={() => handleGoodsType(getRedGoods)}\n//       >\n//         Load red goods\n//       </button>\n\n//       <GoodsList goods={goods} />\n//     </div>\n//   );\n// };\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}